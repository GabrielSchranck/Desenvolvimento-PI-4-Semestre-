// <auto-generated />
using System;
using BookAPI.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BookAPI.Migrations
{
    [DbContext(typeof(BookDbContext))]
    [Migration("20250615200426_addingLivroToNotify")]
    partial class addingLivroToNotify
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BookAPI.Entities.CEPs.Endereco", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Bairro")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Cidade")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("CodigoCep")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<string>("Logradouro")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Uf")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)");

                    b.HasKey("Id");

                    b.ToTable("Enderecos");
                });

            modelBuilder.Entity("BookAPI.Entities.Carrinhos.Carrinho", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ClienteId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClienteId")
                        .IsUnique();

                    b.ToTable("Carrinho");
                });

            modelBuilder.Entity("BookAPI.Entities.Carrinhos.ItemCarrinho", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CarrinhoId")
                        .HasColumnType("int");

                    b.Property<int>("LivroAnunciadoId")
                        .HasColumnType("int");

                    b.Property<int>("Quantidade")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CarrinhoId");

                    b.HasIndex("LivroAnunciadoId");

                    b.ToTable("ItemCarrinho");
                });

            modelBuilder.Entity("BookAPI.Entities.Clientes.CartaoCliente", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Bandeira")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ClienteId")
                        .HasColumnType("int");

                    b.Property<string>("Cvv")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NomeImpresso")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NumeroCartao")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Validade")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ClienteId");

                    b.ToTable("CartoesClientes");
                });

            modelBuilder.Entity("BookAPI.Entities.Clientes.Cliente", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Contato")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("Cpf")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.Property<int>("DDD")
                        .HasMaxLength(2)
                        .HasColumnType("int");

                    b.Property<DateTime>("DataNascimento")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("EmailConfirmado")
                        .HasColumnType("bit");

                    b.Property<int>("Genero")
                        .HasMaxLength(1)
                        .HasColumnType("int");

                    b.Property<int>("Idade")
                        .HasMaxLength(3)
                        .HasColumnType("int");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<double?>("Saldo")
                        .HasColumnType("float");

                    b.Property<string>("Senha")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TokenConfirmacao")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("uuidMercadoPago")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Cpf")
                        .IsUnique();

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Clientes");
                });

            modelBuilder.Entity("BookAPI.Entities.Clientes.EnderecoCliente", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ClienteId")
                        .HasColumnType("int");

                    b.Property<string>("Complemento")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("EnderecoId")
                        .HasColumnType("int");

                    b.Property<int>("Numero")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClienteId");

                    b.HasIndex("EnderecoId");

                    b.ToTable("EnderecosClientes");
                });

            modelBuilder.Entity("BookAPI.Entities.Clientes.Pagamento", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ClienteId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StripePaymentIntentId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StripeSessionId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Valor")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("ClienteId");

                    b.ToTable("Pagamentos");
                });

            modelBuilder.Entity("BookAPI.Entities.ClientesLivros.ClienteLivro", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ClienteId")
                        .HasColumnType("int");

                    b.Property<int>("LivroId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClienteId");

                    b.HasIndex("LivroId");

                    b.ToTable("ClientesLivros");
                });

            modelBuilder.Entity("BookAPI.Entities.Historicos.Historico", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ClienteId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DataHora")
                        .HasColumnType("datetime2");

                    b.Property<int>("TipoOperacao")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClienteId");

                    b.ToTable("Historicos");
                });

            modelBuilder.Entity("BookAPI.Entities.Historicos.ItemHistorico", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Custo")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("HistoricoId")
                        .HasColumnType("int");

                    b.Property<int>("LivroId")
                        .HasColumnType("int");

                    b.Property<int>("Quantidade")
                        .HasColumnType("int");

                    b.Property<decimal>("Valor")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("HistoricoId");

                    b.HasIndex("LivroId");

                    b.ToTable("ItensHistoricos");
                });

            modelBuilder.Entity("BookAPI.Entities.Livros.Categoria", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("NomeCategoria")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.ToTable("Categorias");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            NomeCategoria = "Ficção"
                        },
                        new
                        {
                            Id = 2,
                            NomeCategoria = "Fantasia"
                        },
                        new
                        {
                            Id = 3,
                            NomeCategoria = "Romance"
                        },
                        new
                        {
                            Id = 4,
                            NomeCategoria = "Terror"
                        },
                        new
                        {
                            Id = 5,
                            NomeCategoria = "Suspense"
                        },
                        new
                        {
                            Id = 6,
                            NomeCategoria = "Mistério"
                        },
                        new
                        {
                            Id = 7,
                            NomeCategoria = "Drama"
                        },
                        new
                        {
                            Id = 8,
                            NomeCategoria = "Aventura"
                        },
                        new
                        {
                            Id = 9,
                            NomeCategoria = "Ficção Científica"
                        },
                        new
                        {
                            Id = 10,
                            NomeCategoria = "Biografia"
                        },
                        new
                        {
                            Id = 11,
                            NomeCategoria = "Autobiografia"
                        },
                        new
                        {
                            Id = 12,
                            NomeCategoria = "História"
                        },
                        new
                        {
                            Id = 13,
                            NomeCategoria = "Religião"
                        },
                        new
                        {
                            Id = 14,
                            NomeCategoria = "Espiritualidade"
                        },
                        new
                        {
                            Id = 15,
                            NomeCategoria = "Autoajuda"
                        },
                        new
                        {
                            Id = 16,
                            NomeCategoria = "Negócios"
                        },
                        new
                        {
                            Id = 17,
                            NomeCategoria = "Finanças"
                        },
                        new
                        {
                            Id = 18,
                            NomeCategoria = "Tecnologia"
                        },
                        new
                        {
                            Id = 19,
                            NomeCategoria = "Programação"
                        },
                        new
                        {
                            Id = 20,
                            NomeCategoria = "Ciência"
                        },
                        new
                        {
                            Id = 21,
                            NomeCategoria = "Filosofia"
                        },
                        new
                        {
                            Id = 22,
                            NomeCategoria = "Psicologia"
                        },
                        new
                        {
                            Id = 23,
                            NomeCategoria = "Educação"
                        },
                        new
                        {
                            Id = 24,
                            NomeCategoria = "Direito"
                        },
                        new
                        {
                            Id = 25,
                            NomeCategoria = "Política"
                        },
                        new
                        {
                            Id = 26,
                            NomeCategoria = "Saúde"
                        },
                        new
                        {
                            Id = 27,
                            NomeCategoria = "Medicina"
                        },
                        new
                        {
                            Id = 28,
                            NomeCategoria = "Esportes"
                        },
                        new
                        {
                            Id = 29,
                            NomeCategoria = "Culinária"
                        },
                        new
                        {
                            Id = 30,
                            NomeCategoria = "Arte"
                        },
                        new
                        {
                            Id = 31,
                            NomeCategoria = "Música"
                        },
                        new
                        {
                            Id = 32,
                            NomeCategoria = "Quadrinhos"
                        },
                        new
                        {
                            Id = 33,
                            NomeCategoria = "Mangá"
                        },
                        new
                        {
                            Id = 34,
                            NomeCategoria = "Infantil"
                        },
                        new
                        {
                            Id = 35,
                            NomeCategoria = "Juvenil"
                        },
                        new
                        {
                            Id = 36,
                            NomeCategoria = "Poesia"
                        },
                        new
                        {
                            Id = 37,
                            NomeCategoria = "Humor"
                        },
                        new
                        {
                            Id = 38,
                            NomeCategoria = "Clássicos"
                        },
                        new
                        {
                            Id = 39,
                            NomeCategoria = "Erótico"
                        },
                        new
                        {
                            Id = 40,
                            NomeCategoria = "Viagem"
                        });
                });

            modelBuilder.Entity("BookAPI.Entities.Livros.FotoLivro", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("LivroId")
                        .HasColumnType("int");

                    b.Property<string>("UrlImagem")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("LivroId");

                    b.ToTable("FotosLivros");
                });

            modelBuilder.Entity("BookAPI.Entities.Livros.Livro", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Anunciado")
                        .HasColumnType("bit");

                    b.Property<int>("CategoriaId")
                        .HasColumnType("int");

                    b.Property<int?>("ClienteId")
                        .HasColumnType("int");

                    b.Property<decimal>("Custo")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("DataEmprestimo")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Emprestado")
                        .HasColumnType("bit");

                    b.Property<int>("QtdPaginas")
                        .HasColumnType("int");

                    b.Property<int>("Quantidade")
                        .HasColumnType("int");

                    b.Property<string>("Titulo")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("Valor")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("CategoriaId");

                    b.HasIndex("ClienteId");

                    b.ToTable("Livros");
                });

            modelBuilder.Entity("BookAPI.Entities.Livros.LivroAnunciado", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ClienteId")
                        .HasColumnType("int");

                    b.Property<int>("LivroId")
                        .HasColumnType("int");

                    b.Property<int>("QuantidadeAnunciado")
                        .HasColumnType("int");

                    b.Property<int>("Tipo")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClienteId");

                    b.HasIndex("LivroId");

                    b.ToTable("LivrosAnunciados");
                });

            modelBuilder.Entity("BookAPI.Entities.Notificacoes.Notificacao", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ClienteId")
                        .HasColumnType("int");

                    b.Property<int>("CompradorId")
                        .HasColumnType("int");

                    b.Property<int?>("LivroId")
                        .HasColumnType("int");

                    b.Property<string>("Mensagem")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("Notificado")
                        .HasColumnType("int");

                    b.Property<int>("Tipo")
                        .HasColumnType("int");

                    b.Property<int>("VendedorId")
                        .HasColumnType("int");

                    b.Property<int>("Visto")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClienteId");

                    b.HasIndex("CompradorId");

                    b.HasIndex("LivroId");

                    b.HasIndex("VendedorId");

                    b.ToTable("Notificacoes");
                });

            modelBuilder.Entity("BookAPI.Entities.Carrinhos.Carrinho", b =>
                {
                    b.HasOne("BookAPI.Entities.Clientes.Cliente", null)
                        .WithOne("Carrinho")
                        .HasForeignKey("BookAPI.Entities.Carrinhos.Carrinho", "ClienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BookAPI.Entities.Carrinhos.ItemCarrinho", b =>
                {
                    b.HasOne("BookAPI.Entities.Carrinhos.Carrinho", "Carrinho")
                        .WithMany("Itens")
                        .HasForeignKey("CarrinhoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookAPI.Entities.Livros.LivroAnunciado", "LivroAnunciado")
                        .WithMany()
                        .HasForeignKey("LivroAnunciadoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Carrinho");

                    b.Navigation("LivroAnunciado");
                });

            modelBuilder.Entity("BookAPI.Entities.Clientes.CartaoCliente", b =>
                {
                    b.HasOne("BookAPI.Entities.Clientes.Cliente", "Cliente")
                        .WithMany("CartaoClientes")
                        .HasForeignKey("ClienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cliente");
                });

            modelBuilder.Entity("BookAPI.Entities.Clientes.EnderecoCliente", b =>
                {
                    b.HasOne("BookAPI.Entities.Clientes.Cliente", "Cliente")
                        .WithMany("Enderecos")
                        .HasForeignKey("ClienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookAPI.Entities.CEPs.Endereco", "Endereco")
                        .WithMany("EnderecosCliente")
                        .HasForeignKey("EnderecoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cliente");

                    b.Navigation("Endereco");
                });

            modelBuilder.Entity("BookAPI.Entities.Clientes.Pagamento", b =>
                {
                    b.HasOne("BookAPI.Entities.Clientes.Cliente", "Cliente")
                        .WithMany()
                        .HasForeignKey("ClienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cliente");
                });

            modelBuilder.Entity("BookAPI.Entities.ClientesLivros.ClienteLivro", b =>
                {
                    b.HasOne("BookAPI.Entities.Clientes.Cliente", "Cliente")
                        .WithMany("ClientesLivros")
                        .HasForeignKey("ClienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookAPI.Entities.Livros.Livro", "Livro")
                        .WithMany("CLientesLivros")
                        .HasForeignKey("LivroId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cliente");

                    b.Navigation("Livro");
                });

            modelBuilder.Entity("BookAPI.Entities.Historicos.Historico", b =>
                {
                    b.HasOne("BookAPI.Entities.Clientes.Cliente", "Cliente")
                        .WithMany("Historicos")
                        .HasForeignKey("ClienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cliente");
                });

            modelBuilder.Entity("BookAPI.Entities.Historicos.ItemHistorico", b =>
                {
                    b.HasOne("BookAPI.Entities.Historicos.Historico", "Historico")
                        .WithMany("ItensHistorico")
                        .HasForeignKey("HistoricoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookAPI.Entities.Livros.Livro", "Livro")
                        .WithMany("ItensHistorico")
                        .HasForeignKey("LivroId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Historico");

                    b.Navigation("Livro");
                });

            modelBuilder.Entity("BookAPI.Entities.Livros.FotoLivro", b =>
                {
                    b.HasOne("BookAPI.Entities.Livros.Livro", "Livro")
                        .WithMany("FotosLivros")
                        .HasForeignKey("LivroId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Livro");
                });

            modelBuilder.Entity("BookAPI.Entities.Livros.Livro", b =>
                {
                    b.HasOne("BookAPI.Entities.Livros.Categoria", "Categoria")
                        .WithMany("Livros")
                        .HasForeignKey("CategoriaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookAPI.Entities.Clientes.Cliente", "Cliente")
                        .WithMany()
                        .HasForeignKey("ClienteId");

                    b.Navigation("Categoria");

                    b.Navigation("Cliente");
                });

            modelBuilder.Entity("BookAPI.Entities.Livros.LivroAnunciado", b =>
                {
                    b.HasOne("BookAPI.Entities.Clientes.Cliente", "Cliente")
                        .WithMany()
                        .HasForeignKey("ClienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookAPI.Entities.Livros.Livro", "Livro")
                        .WithMany("livrosAnunciados")
                        .HasForeignKey("LivroId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cliente");

                    b.Navigation("Livro");
                });

            modelBuilder.Entity("BookAPI.Entities.Notificacoes.Notificacao", b =>
                {
                    b.HasOne("BookAPI.Entities.Clientes.Cliente", null)
                        .WithMany("Notificacoes")
                        .HasForeignKey("ClienteId");

                    b.HasOne("BookAPI.Entities.Clientes.Cliente", "Comprador")
                        .WithMany()
                        .HasForeignKey("CompradorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BookAPI.Entities.Livros.Livro", "Livro")
                        .WithMany()
                        .HasForeignKey("LivroId");

                    b.HasOne("BookAPI.Entities.Clientes.Cliente", "Vendedor")
                        .WithMany()
                        .HasForeignKey("VendedorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Comprador");

                    b.Navigation("Livro");

                    b.Navigation("Vendedor");
                });

            modelBuilder.Entity("BookAPI.Entities.CEPs.Endereco", b =>
                {
                    b.Navigation("EnderecosCliente");
                });

            modelBuilder.Entity("BookAPI.Entities.Carrinhos.Carrinho", b =>
                {
                    b.Navigation("Itens");
                });

            modelBuilder.Entity("BookAPI.Entities.Clientes.Cliente", b =>
                {
                    b.Navigation("Carrinho");

                    b.Navigation("CartaoClientes");

                    b.Navigation("ClientesLivros");

                    b.Navigation("Enderecos");

                    b.Navigation("Historicos");

                    b.Navigation("Notificacoes");
                });

            modelBuilder.Entity("BookAPI.Entities.Historicos.Historico", b =>
                {
                    b.Navigation("ItensHistorico");
                });

            modelBuilder.Entity("BookAPI.Entities.Livros.Categoria", b =>
                {
                    b.Navigation("Livros");
                });

            modelBuilder.Entity("BookAPI.Entities.Livros.Livro", b =>
                {
                    b.Navigation("CLientesLivros");

                    b.Navigation("FotosLivros");

                    b.Navigation("ItensHistorico");

                    b.Navigation("livrosAnunciados");
                });
#pragma warning restore 612, 618
        }
    }
}
